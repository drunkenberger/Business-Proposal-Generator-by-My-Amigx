import React, { useState } from "react";
import { useTranslation } from "react-i18next";
import { Button } from "./ui/button";
import { FileDown, FileText, Share2, Link, Mail, MessageCircle, CheckCircle2 } from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "./ui/tooltip";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from "./ui/dropdown-menu";
import { motion, AnimatePresence } from "framer-motion";

interface ExportActionsProps {
  onExportPDF?: () => void;
  onExportWord?: () => void;
  isGenerating?: boolean;
  companyLogo?: string;
  clientName?: string;
  projectTitle?: string;
}

const ExportActions = ({
  onExportPDF = () => console.log("Export PDF clicked"),
  onExportWord = () => console.log("Export Word clicked"),
  isGenerating = false,
  companyLogo = "/images/waza-logo.png",
  clientName = "Client",
  projectTitle = "Project",
}: ExportActionsProps) => {
  const { t } = useTranslation();
  const [isExporting, setIsExporting] = useState(false);
  const [exportSuccess, setExportSuccess] = useState<string | null>(null);
  const [shareUrl, setShareUrl] = useState<string | null>(null);

  const handleExportWithFeedback = async (exportFn: () => void, type: string) => {
    setIsExporting(true);
    try {
      await exportFn();
      setExportSuccess(type);
      setTimeout(() => setExportSuccess(null), 3000);
    } catch (error) {
      console.error('Export failed:', error);
    } finally {
      setIsExporting(false);
    }
  };

  const generateShareUrl = () => {
    // In a real app, this would generate a shareable link
    const mockUrl = `https://wazalab.com/proposals/${Date.now()}`;
    setShareUrl(mockUrl);
    navigator.clipboard.writeText(mockUrl);
    return mockUrl;
  };

  const handleShare = (method: string) => {
    const url = shareUrl || generateShareUrl();
    const subject = `Business Proposal - ${projectTitle}`;
    const body = `Please review the business proposal for ${projectTitle}.\n\nView online: ${url}\n\nGenerated by WAZA Lab`;
    
    switch (method) {
      case 'email':
        window.open(`mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`);
        break;
      case 'copy':
        navigator.clipboard.writeText(url);
        break;
      case 'whatsapp':
        window.open(`https://wa.me/?text=${encodeURIComponent(body)}`);
        break;
    }
  };
  return (
    <motion.div 
      initial={{ y: 20, opacity: 0 }}
      animate={{ y: 0, opacity: 1 }}
      className="bg-gradient-to-r from-black via-zinc-900 to-black p-4 border-t border-amber-500/30 backdrop-blur-lg shadow-2xl shadow-black/60"
      style={{
        background: 'linear-gradient(135deg, rgba(0,0,0,0.95) 0%, rgba(20,20,20,0.9) 50%, rgba(0,0,0,0.95) 100%)',
        backdropFilter: 'blur(20px)',
        boxShadow: 'inset 0 1px 0 rgba(245,158,11,0.1), 0 -10px 25px -5px rgba(0,0,0,0.5)'
      }}
    >
      <div className="flex items-center justify-between w-full">
        <div className="flex items-center gap-3">
          <div className="flex items-center gap-2">
            <img
              src={companyLogo}
              alt="WAZA Lab Logo"
              className="h-7 w-auto drop-shadow-sm"
            />
            <span className="text-sm font-medium text-amber-300/80 tracking-wide" style={{ textShadow: '0 0 5px rgba(245,158,11,0.3)' }}>Powered by Waza Lab using Lemy AI</span>
          </div>
          
          <AnimatePresence>
            {exportSuccess && (
              <motion.div
                initial={{ scale: 0, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0, opacity: 0 }}
                className="flex items-center gap-2 bg-amber-500/20 text-amber-200 px-3 py-1 rounded-full text-sm font-medium border border-amber-500/30 shadow-lg shadow-amber-500/20"
              >
                <CheckCircle2 className="h-4 w-4" />
                {exportSuccess} exported successfully!
              </motion.div>
            )}
          </AnimatePresence>
        </div>
        
        <div className="flex items-center gap-3">
          <TooltipProvider>
            {/* Share Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="outline"
                  size="sm"
                  className="flex items-center gap-2 bg-black/60 hover:bg-amber-500/20 border-amber-500/30 text-amber-200 hover:text-amber-100 transition-all duration-200 hover:shadow-lg hover:shadow-amber-500/30 backdrop-blur-sm"
                  disabled={isGenerating || isExporting}
                >
                  <Share2 className="h-4 w-4" />
                  Share
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="w-48">
                <DropdownMenuItem onClick={() => handleShare('copy')} className="flex items-center gap-2">
                  <Link className="h-4 w-4" />
                  Copy Link
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => handleShare('email')} className="flex items-center gap-2">
                  <Mail className="h-4 w-4" />
                  Email
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => handleShare('whatsapp')} className="flex items-center gap-2">
                  <MessageCircle className="h-4 w-4" />
                  WhatsApp
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>

            {/* Export Word */}
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleExportWithFeedback(onExportWord, 'Word')}
                  disabled={isGenerating || isExporting}
                  className="flex items-center gap-2 bg-amber-500/10 hover:bg-amber-500/20 border-amber-500/40 text-amber-200 hover:text-amber-100 transition-all duration-200 hover:shadow-lg hover:shadow-amber-500/30 backdrop-blur-sm"
                >
                  {isExporting ? (
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                      className="h-4 w-4 border-2 border-amber-400 border-t-transparent rounded-full"
                    />
                  ) : (
                    <FileText className="h-4 w-4" />
                  )}
                  {t("exportWord")}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Download as Word document (.docx)</p>
              </TooltipContent>
            </Tooltip>

            {/* Export PDF */}
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  onClick={() => handleExportWithFeedback(onExportPDF, 'PDF')}
                  disabled={isGenerating || isExporting}
                  className="flex items-center gap-2 bg-gradient-to-r from-amber-600 to-yellow-600 hover:from-amber-700 hover:to-yellow-700 text-black font-bold transition-all duration-200 hover:shadow-2xl hover:shadow-amber-500/50 transform hover:scale-105 border border-amber-400/50"
                >
                  {isExporting ? (
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                      className="h-4 w-4 border-2 border-black border-t-transparent rounded-full"
                    />
                  ) : (
                    <FileDown className="h-4 w-4" />
                  )}
                  {t("exportPDF")}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Download as PDF document</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
      </div>
    </motion.div>
  );
};

export default ExportActions;
